#################################
#             Shadows           #
#################################


# Enabled client-side shadows on windows. Note desktop windows
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
# unless explicitly requested using the wintypes option.
#
# shadow = false
shadow = true;

# The blur radius for shadows, in pixels. (defaults to 12)
# shadow-radius = 12
shadow-radius = 10;

# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
# shadow-opacity = .75

# The left offset for shadows, in pixels. (defaults to -15)
# shadow-offset-x = -15
shadow-offset-x = -15;

# The top offset for shadows, in pixels. (defaults to -15)
# shadow-offset-y = -15
shadow-offset-y = -15;

# Red color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-red = 0

# Green color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-green = 0

# Blue color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-blue = 0

# Hex string color value of shadow (#000000 - #FFFFFF, defaults to #000000). This option will override options set shadow-(red/green/blue)
shadow-color = "#1e1e2e"

# Specify a list of conditions of windows that should have no shadow.
#
# examples:
#   shadow-exclude = "n:e:Notification";
#
# shadow-exclude = []
shadow-exclude = [
  "!focused", 
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "class_g = 'rofi'",
  "_GTK_FRAME_EXTENTS@:c"
];

# Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
# clip-shadow-above = []

# Specify a X geometry that describes the region in which shadow should not
# be painted in, such as a dock window region. Use
#    shadow-exclude-reg = "x10+0+0"
# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
#
# shadow-exclude-reg = ""

# Crop shadow of a window fully on a particular monitor to that monitor. This is
# currently implemented using the X RandR extension.
# crop-shadow-to-monitor = false


#################################
#           Fading              #
#################################


# Fade windows in/out when opening/closing and when opacity changes,
#  unless no-fading-openclose is used.
# fading = false
fading = true;

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
# fade-in-step = 0.028
fade-in-step = 0.028;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
# fade-out-step = 0.03
fade-out-step = 0.03;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 7

# Specify a list of conditions of windows that should not be faded.
# fade-exclude = []

# Do not fade on window open/close.
no-fading-openclose = false

# do not fade destroyed argb windows with wm frame. workaround of bugs in openbox, fluxbox, etc.
# no-fading-destroyed-argb = false


#################################
#   transparency / opacity      #
#################################


# opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
# inactive-opacity = 1
inactive-opacity = 0.9;

# opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
# frame-opacity = 1.0
# frame-opacity = 0.9;

# let inactive opacity set by -i override the '_net_wm_window_opacity' values of windows.
# inactive-opacity-override = true
inactive-opacity-override = false;

# default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
# active-opacity = 1.0

# dim inactive windows. (0.0 - 1.0, defaults to 0.0)
# inactive-dim = 0.0

# specify a list of conditions of windows that should never be considered focused.
# focus-exclude = []
focus-exclude = [ "class_g = 'cairo-clock'" ];

# use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-dim-fixed = 1.0

# specify a list of opacity rules, in the format `percent:pattern`,
# like `50:name *= "firefox"`. picom-trans is recommended over this.
# note we don't make any guarantee about possible conflicts with other
# programs that set '_net_wm_window_opacity' on frame or client windows.
# example:
#    opacity-rule = [ "80:class_g = 'urxvt'" ];
#
opacity-rule = ["100:class_g = 'mpv'", "100:name = 'Picture in picture'", "100:name = 'Picture-in-picture'"]


#################################
#           corners             #
#################################

# sets the radius of rounded window corners. when > 0, the compositor will
# round the corners of windows. does not interact well with
# `transparent-clipping`.
corner-radius = 10

# exclude conditions for rounded corners.
rounded-corners-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "class_g = 'i3-frame'",
  "class_g = 'rofi'",
  # "class_g = 'polybar'"
];


#################################
#     background-blurring       #
#################################

# parameters for background blurring, see the *blur* section for more information.
# blur-method = dual_kawase
# blur-size = 12
#
# blur-deviation = false
#
# blur-strength = 5

# blur background of semi-transparent / argb windows.
# bad in performance, with driver-dependent behavior.
# the name of the switch may change without prior notifications.
#
# blur-background = false

# blur background of windows when the window frame is not opaque.
# implies:
#    blur-background
# bad in performance, with driver-dependent behavior. the name may change.
#
# blur-background-frame = false


# use fixed blur strength rather than adjusting according to window opacity.
# blur-background-fixed = false


# specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#
# blur-kern = ""
# blur-kern = "3x3box";


# exclude conditions for background blur.
# blur-background-exclude = []
blur-background-exclude = [
  "role = 'xborder'",
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "_gtk_frame_extents@:c"
];

#################################
#       general settings        #
#################################

# enable remote control via d-bus. see the man page for more details.
# dbus = true

# daemonize process. fork to background after initialization. causes issues with certain (badly-written) drivers.
# daemon = false

# specify the backend to use: `xrender`, `glx`, `egl` or `xr_glx_hybrid`.
# `xrender` is the default one.
#
backend = "glx"
# backend = "xrender";

# use higher precision during rendering, and apply dither when presenting the
# rendered screen. reduces banding artifacts, but might cause performance
# degradation. only works with opengl.
dithered-present = true;

# enable/disable vsync.
# vsync = false
vsync = true;

# try to detect wm windows (a non-override-redirect window with no
# child that has 'wm_state') and mark them as active.
#
# mark-wmwin-focused = false
mark-wmwin-focused = true;

# mark override-redirect windows that doesn't have a child window with 'wm_state' focused.
# mark-ovredir-focused = false
mark-ovredir-focused = true;

# try to detect windows with rounded corners and don't consider them
# shaped windows. the accuracy is not very high, unfortunately.
#
# detect-rounded-corners = false
detect-rounded-corners = true;

# detect '_net_wm_window_opacity' on client windows, useful for window managers
# not passing '_net_wm_window_opacity' of client windows to frame windows.
#
# detect-client-opacity = false
detect-client-opacity = true;

# use ewmh '_net_active_window' to determine currently focused window,
# rather than listening to 'focusin'/'focusout' event. might have more accuracy,
# provided that the wm supports it.
#
# use-ewmh-active-win = false

# unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. known to cause flickering
# when redirecting/unredirecting windows.
#
# unredir-if-possible = false

# delay before unredirecting the window, in milliseconds. defaults to 0.
# unredir-if-possible-delay = 0

# conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []

# use 'wm_transient_for' to group windows, and consider windows
# in the same group focused at the same time.
#
# detect-transient = false
detect-transient = true;

# use 'wm_client_leader' to group windows, and consider windows in the same
# group focused at the same time. this usually means windows from the same application
# will be considered focused or unfocused at the same time.
# 'wm_transient_for' has higher priority if detect-transient is enabled, too.
#
# detect-client-leader = false

# resize damaged region by a specific number of pixels.
# a positive value enlarges it while a negative one shrinks it.
# if the value is positive, those additional pixels will not be actually painted
# to screen, only used in blur calculation, and such. (due to technical limitations,
# with use-damage, those pixels will still be incorrectly painted to screen.)
# primarily used to fix the line corruption issues of blur,
# in which case you should use the blur radius value here
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
# with a 5x5 one you use `--resize-damage 2`, and so on).
# may or may not work with *--glx-no-stencil*. shrinking doesn't function correctly.
#
# resize-damage = 1

# specify a list of conditions of windows that should be painted with inverted color.
# resource-hogging, and is not well tested.
#
# invert-color-include = []

# glx backend: avoid using stencil buffer, useful if you don't have a stencil buffer.
# might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# my tests show a 15% performance boost. recommended.
#
glx-no-stencil = true;

# glx backend: avoid rebinding pixmap on window damage.
# probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (llvmpipe, xf86-video-intel, etc.).
# recommended if it works.
#
# glx-no-rebind-pixmap = false

# disable the use of damage information.
# this cause the whole screen to be redrawn every time, instead of the part of the screen
# has actually changed. potentially degrades the performance, but might fix some artifacts.
# the opposing option is use-damage
#
# no-use-damage = false
use-damage = true;

# use x sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. needed on nvidia-drivers
# with glx backend for some users.
#
# xrender-sync-fence = false

# glx backend: use specified glsl fragment shader for rendering window
# contents. read the man page for a detailed explanation of the interface.
#
# window-shader-fg = "default"

# use rules to set per-window shaders. syntax is shader_path:pattern, similar
# to opacity-rule. shader_path can be "default". this overrides window-shader-fg.
#
# window-shader-fg-rule = [
#   "my_shader.frag:window_type != 'dock'"
# ]

# force all windows to be painted with blending. useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
#
# force-win-blend = false

# do not use ewmh to detect fullscreen windows.
# reverts to checking if a window is fullscreen based only on its size and coordinates.
#
# no-ewmh-fullscreen = false

# dimming bright windows so their brightness doesn't exceed this set value.
# brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# setting this to 1.0 disables this behaviour. requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

# make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
# transparent-clipping = false

# specify a list of conditions of windows that should never have transparent
# clipping applied. useful for screenshot tools, where you need to be able to
# see through transparent parts of the window.
#
# transparent-clipping-exclude = []

# set the log level. possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. case doesn't matter.
# if using the "trace" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# log-level = "debug"
log-level = "warn";

# set the log file.
# if *--log-file* is never specified, logs will be written to stderr.
# otherwise, logs will to written to the given file, though some of the early
# logs might still be written to the stderr.
# when setting this option from the config file, it is recommended to use an absolute path.
#
# log-file = "/path/to/your/log/file"

# show all x errors (for debugging)
# show-all-xerrors = false

# write process id to a file.
# write-pid-path = "/path/to/your/log/file"

# window type settings
#
# 'window_type' is one of the 15 window types defined in ewmh standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
#
# following per window-type options are available: ::
#
#   fade, shadow:::
#     controls window-type-specific shadow and fade settings.
#
#   opacity:::
#     controls default opacity of the window type.
#
#   focus:::
#     controls whether the window of this type is to be always considered focused.
#     (by default, all window types except "normal" and "dialog" has this on.)
#
#   full-shadow:::
#     controls whether shadow is drawn under the parts of the window that you
#     normally won't be able to see. useful when the window has parts of it
#     transparent, and you want shadows in those areas.
#
#   clip-shadow-above:::
#     controls whether shadows that would have been drawn above the window should
#     be clipped. useful for dock windows that should have no shadow painted on top.
#
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection,
#     you can set this to `true`.
#
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; clip-shadow-above = true; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};

# refresh-rate = 60
